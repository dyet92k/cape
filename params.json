{"name":"Cape","tagline":"Dynamically generate Capistrano recipes for Rake tasks","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"                    _____     __\r\n                   / ___/___ / /_  __ _____ __ ______\r\n                  / (_ // -_) __/ / // / _ | // / __/\r\n                  \\___/ \\__/\\__/  \\_, /\\___|_,_/_/\r\n          '-(+++++...            /___/ ............  s++++++++.\r\n       .(++++++++++++(      -+++~~~~~  'N++++++++++= B++++++++s\r\n      '+++++++++++++++(     DN=++++++< -NB+++++++++s Bz++++++++\r\n      +++++++++++++++++.   'NNN=++++++(-BNB+++++++++'BN========-\r\n     =B=+++++++++sDBBBBs<. +NNNN=+++++(<NNNBDBDBNNNNDBNNBBBBBBBz\r\n    'NN+s+++++=BBBh=+((+sB=DNNNNNBBBNNDhNNNN'   ..  -BNs      (z\r\n    sN+N+z+++sBs-        .hNNNNBNh(-'   NNNN.  .NB-  <Ns   +BBBz\r\n    D+N+N+z=Bs.   .~.     'NNNNNB~      DNNN   .NN+  (Ns   =B+~\r\n    BN+N+NNB+    ~NBD      BNNNBN   h'  hNNN   .Bs<  <Ns   =Dz~\r\n    BNNNN+ND     +BhB      DNNNBz  'N~  sNNN   'ND'  hNs    -(z-\r\n    NNNNNNB(     sDDN      hNNNB(  +N~  +NNN    ..-<hBNs    ~=h-\r\n    NNNNNNB-     sDBN     'DNNNN.  DN~  <BNN   'NNhs(NNs   =NN-\r\n    NNNNNNB'     zNNN(+sDNNBNNNz  .NB(  ~BNN   'D    NNs   =Bh~\r\n    NNNNNNN.     zNNNBNBBNNNNNB(  <NB~  'BNB   'D    <Bs   =NNNN\r\n    NNNNNNN.     zNNNNNNNNNNBNN.  .     .NDB   -D     hs       N\r\n    NNNNNNN.     zNNNNNhBNBN=+z   +BN-   NDB  '(D     <BhhhhhhhN\r\n    BNNNNNN.     zNNNh=<~. h-s<   D~D'.-~B<NBNBDs     ''``\r\n    DNNNNNN.     zNNN      D-B-~(+B DNBDzs-`\r\n    sNNNNNN.     zNNN      B(NDhs=(  ''`\r\n    (BNNNNN'     zNDB     ~D.\r\n     sNNNNB-     +hsz     h<                             O___\r\n      <NNNB(     -=s'   'hz      ___  ___              < s > \\____\r\n        ~BNh          .+B+      / _ \\/ _ \\               = \\    /\r\n          ~Dz~.   .~+zB='       \\___/_//_/              / \\ \\__/\r\n            <hNNBNBh=(.                                /   \\   `\r\n               ..\r\n\r\n# [<img align=\"right\" src=\"https://codeclimate.com/badge.png\" title=\"Code Climate\" />](http://codeclimate.com/github/njonsson/cape) [<img align=\"right\" src=\"https://gemnasium.com/njonsson/cape.png\" title=\"Gemnasium build status\" />](http://gemnasium.com/njonsson/cape) [<img align=\"right\" src=\"https://secure.travis-ci.org/njonsson/cape.png?branch=master\" title=\"Travis CI build status\" />](http://travis-ci.org/njonsson/cape) Cape\r\n\r\nIf\r\n\r\n* **You use [Capistrano](http://capify.org)** to deploy your application, and\r\n* **You have [Rake](http://rake.rubyforge.org) tasks that you want to execute remotely** — but you don’t want to hand-code Capistrano recipes for each Rake task —\r\n\r\nThen\r\n\r\n* **You can use the [Cape](http://njonsson.github.com/cape) DSL** within Capistrano recipes to dynamically add recipes for your application’s Rake tasks, and\r\n* **You can execute your Rake tasks on your deployed servers,** friction-free, and look like a superhero. _[cue fanfare]_\r\n\r\n## Features\r\n\r\n* **Mirror Rake tasks** as Capistrano recipes, optionally filtered by namespace or name\r\n* **Embed Rake tasks** in Capistrano namespaces\r\n* **Pass arguments** to Rake tasks by setting environment variables with the same names\r\n* **Specify the Rake executable** for local and remote Rake installations\r\n* **Enumerate Rake tasks** for your own purposes\r\n\r\nSee what’s changed lately by reading the [project history](http://github.com/njonsson/cape/blob/master/History.markdown).\r\n\r\n## Installation — get your Cape on\r\n\r\nInstall [the RubyGem](http://rubygems.org/gems/cape \"Cape at RubyGems.org\").\r\n\r\n    $ gem install cape\r\n\r\nOr you may want to make Cape a dependency of your project by using [Bundler](http://gembundler.com).\r\n\r\n    # Gemfile\r\n\r\n    source 'http://rubygems.org'\r\n\r\n    gem 'cape', '~> 1'\r\n\r\n## Examples\r\n\r\nAssume the following Rake tasks are defined.\r\n\r\n    desc 'Rakes the leaves'\r\n    task :leaves do\r\n      $stdout.puts \"Raking the leaves\"\r\n    end\r\n\r\n    desc 'Rakes and bags the leaves'\r\n    task :bag_leaves, [:paper_or_plastic] => :leaves do |task, arguments|\r\n      $stdout.puts \"Putting the leaves in a #{arguments[:paper_or_plastic]} bag\"\r\n    end\r\n\r\nRake lists these tasks in the expected fashion.\r\n\r\n    $ rake --tasks\r\n    rake bag_leaves[paper_or_plastic]  # Rakes and bags the leaves\r\n    rake leaves                        # Rakes the leaves\r\n\r\n    $ rake --describe bag_leaves\r\n    rake bag_leaves[paper_or_plastic]\r\n        Rakes and bags the leaves\r\n\r\n### Simply mirror all Rake tasks as Capistrano recipes\r\n\r\nAdd the following to your Capistrano recipes. Note that Cape statements must be contained in a `Cape` block.\r\n\r\n    # config/deploy.rb\r\n\r\n    require 'cape'\r\n\r\n    Cape do\r\n      # Create Capistrano recipes for all Rake tasks.\r\n      mirror_rake_tasks\r\n    end\r\n\r\nNow all your Rake tasks appear alongside your Capistrano recipes.\r\n\r\n    $ cap --tasks\r\n    cap deploy               # Deploys your project.\r\n    ...\r\n    [other built-in Capistrano recipes]\r\n    ...\r\n    cap bag_leaves           # Rakes and bags the leaves.\r\n    cap leaves               # Rakes the leaves.\r\n    Some tasks were not listed, either because they have no description,\r\n    or because they are only used internally by other tasks. To see all\r\n    tasks, type `cap -vT'.\r\n\r\n    Extended help may be available for these tasks.\r\n    Type `cap -e taskname' to view it.\r\n\r\nLet’s use Capistrano to view the unabbreviated description of a Rake task recipe, including instructions for how to pass arguments to it. Note that Rake task parameters are automatically converted to environment variables.\r\n\r\n    $ cap --explain bag_leaves\r\n    ------------------------------------------------------------\r\n    cap bag_leaves\r\n    ------------------------------------------------------------\r\n    Bags the leaves.\r\n\r\n    Set environment variable PAPER_OR_PLASTIC if you want to pass a Rake task argument.\r\n\r\nHere’s how to invoke a task/recipe with arguments. On the local computer, via Rake:\r\n\r\n    $ rake bag_leaves[plastic]\r\n    (in /current/working/directory)\r\n    Raking the leaves\r\n    Putting the leaves in a plastic bag\r\n\r\nOn remote computers, via Capistrano:\r\n\r\n    $ cap bag_leaves PAPER_OR_PLASTIC=plastic\r\n      * executing `bag_leaves'\r\n      * executing \"cd /path/to/currently/deployed/version/of/your/app && /usr/bin/env `/usr/bin/env bundle check >/dev/null 2>&1; case $? in 0|1 ) echo bundle exec ;; esac` rake bag_leaves[plastic]\"\r\n        servers: [\"your.server.name\"]\r\n        [your.server.name] executing command\r\n     ** [out :: your.server.name] (in /path/to/currently/deployed/version/of/your/app)\r\n     ** [out :: your.server.name] Raking the leaves\r\n     ** [out :: your.server.name] Putting the leaves in a plastic bag\r\n        command finished in 1000ms\r\n\r\n### Mirror some Rake tasks, but not others\r\n\r\nCape lets you filter the Rake tasks to be mirrored. Note that Cape statements must be contained in a `Cape` block.\r\n\r\n    # config/deploy.rb\r\n\r\n    require 'cape'\r\n\r\n    Cape do\r\n      # Create Capistrano recipes for the Rake task 'foo' and/or for the tasks in the\r\n      # 'foo' namespace.\r\n      mirror_rake_tasks :foo\r\n    end\r\n\r\n### Mirror Rake tasks that require Capistrano recipe options and/or environment variables\r\n\r\nCape lets you specify options used for defining Capistrano recipes. You can also specify remote environment variables to be set when executing Rake tasks. Note that Cape statements must be contained in a `Cape` block.\r\n\r\n    # config/deploy.rb\r\n\r\n    require 'cape'\r\n\r\n    Cape do\r\n      # Display defined Rails routes on application server remote machines only.\r\n      mirror_rake_tasks :routes, :roles => :app\r\n\r\n      # Execute database migration on application server remote machines only,\r\n      # and set the 'RAILS_ENV' environment variable to the value of the\r\n      # Capistrano variable 'rails_env'.\r\n      mirror_rake_tasks 'db:migrate', :roles => :app do |env|\r\n        env['RAILS_ENV'] = rails_env\r\n      end\r\n    end\r\n\r\nThe above is equivalent to the following manually-defined Capistrano recipes.\r\n\r\n    # config/deploy.rb\r\n\r\n    # These translations to Capistrano are just for illustration.\r\n\r\n    RAKE = '/usr/bin/env '                                +\r\n           '`'                                            +\r\n            '/usr/bin/env bundle check >/dev/null 2>&1; ' +\r\n            'case $? in '                                 +\r\n               # Exit code 0: bundle is defined and installed\r\n               # Exit code 1: bundle is defined but not installed\r\n              '0|1 ) '                                    +\r\n                'echo bundle exec '                       +\r\n                ';; '                                     +\r\n            'esac'                                        +\r\n           '` '                                           +\r\n           'rake'\r\n\r\n    task :routes, :roles => :app do\r\n      run \"cd #{current_path} && #{RAKE} routes\"\r\n    end\r\n\r\n    namespace :db do\r\n      task :migrate, :roles => :app do\r\n        run \"cd #{current_path} && #{RAKE} db:migrate RAILS_ENV=#{rails_env}\"\r\n      end\r\n    end\r\n\r\n### Mirror Rake tasks into a Capistrano namespace\r\n\r\nCape plays friendly with the Capistrano DSL for organizing Rake tasks in Capistrano namespaces. Note that Cape statements must be contained in a `Cape` block.\r\n\r\n    # config/deploy.rb\r\n\r\n    require 'cape'\r\n\r\n    namespace :rake_tasks do\r\n      # Use an argument with the Cape block, if you want to or need to.\r\n      Cape do |cape|\r\n        cape.mirror_rake_tasks\r\n      end\r\n    end\r\n\r\n### Iterate over available Rake tasks\r\n\r\nCape lets you enumerate Rake tasks, optionally filtering them by task name or namespace. Note that Cape statements must be contained in a `Cape` block.\r\n\r\n    # config/deploy.rb\r\n\r\n    require 'cape'\r\n\r\n    Cape do\r\n      # Enumerate all Rake tasks.\r\n      each_rake_task do |t|\r\n        # Do something interesting with this hash:\r\n        # * t[:name] -- the full name of the task\r\n        # * t[:parameters] -- the names of task arguments\r\n        # * t[:description] -- documentation on the task, including parameters\r\n      end\r\n\r\n      # Enumerate the Rake task 'foo' and/or the tasks in the 'foo' namespace.\r\n      each_rake_task 'foo' do |t|\r\n        # ...\r\n      end\r\n    end\r\n\r\n### Configure Rake execution\r\n\r\nCape lets you specify how Rake should be run on the local computer and on remote computers. But the default behavior is most likely just right for your needs:\r\n\r\n* It detects whether Bundler is installed on the computer\r\n* It detects whether the project uses Bundler to manage its dependencies\r\n* It runs Rake via Bundler if the above conditions are true; otherwise, it runs Rake directly\r\n\r\nNote that Cape statements must be contained in a `Cape` block.\r\n\r\n    # config/deploy.rb\r\n\r\n    require 'cape'\r\n\r\n    # Configure Cape never to run Rake via Bundler, neither locally nor remotely.\r\n    Cape.local_rake_executable  = '/usr/bin/env rake'\r\n    Cape.remote_rake_executable = '/usr/bin/env rake'\r\n\r\n    Cape do\r\n      # Create Capistrano recipes for all Rake tasks.\r\n      mirror_rake_tasks\r\n    end\r\n\r\n## Known issues\r\n\r\n**A Rake task that lacks a description cannot be mirrored or enumerated.** This is pending [an enhancement to Rake](http://github.com/jimweirich/rake/pull/99 \"Rake pull request #99 (“Add ‘--include-hidden-tasks’ option to enhance ‘-T’ and ‘-D’ ”)\").\r\n\r\n**A Rake task whose name collides with a Ruby method cannot be mirrored.** For example, the name of [Rails](http://rubyonrails.org)’s _db:fixtures:load_ task collides with the Ruby Core Library’s [_Kernel::load_ method](http://ruby-doc.org/core/Kernel.html#method-i-load) because that method is mixed into all objects. If you try to mirror _db:fixtures:load_, Capistrano will raise an exception. There is [a questionable workaround](http://github.com/njonsson/cape/issues/7#issuecomment-5632718 \"Comment on Cape issue #7 (“defining a task named ‘load’ would shadow an existing method with that name (ArgumentError)”)\") for this.\r\n\r\n**A Rake task is always executed in the Capistrano deployment’s _current_path_.** You may need to execute a task under _release_path_ or another remote filesystem location, but this is not possible at present. [Discuss](http://github.com/njonsson/cape/issues/9 \"Cape issue #9 (“Cape Always Runs the Mirrorred Rake Tasks Under $current_path”)\") this.\r\n\r\n## Contributing\r\n\r\nReport defects and feature requests on [GitHub Issues](http://github.com/njonsson/cape/issues).\r\n\r\nYour patches are welcome, and you will receive attribution here for good stuff.\r\n\r\n## License\r\n\r\nReleased under the [MIT License](http://github.com/njonsson/cape/blob/master/License.markdown).\r\n"}